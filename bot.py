import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import replace_text

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")

start_text = """–î–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ç–∞–∫–∂–µ, –∫–∞–∫ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ pdf —Ñ–∞–π–ª–µ, –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
2. –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–æ—Ç–Ω—è–º–∏–∏ –∏ —Ç—ã—Å—è—á–∞–º–∏
3. –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
5. –ü–æ–ª—É—á–∞—Ç–µ–ª—å
6. –ë–∞–Ω–∫
7. –ò–¥–µ–Ω—Ç–∏—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
8. –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞—Ü–∏–∏
9. –°—á–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è

–í—Å–µ–≥–æ 9 —Å—Ç—Ä–æ–∫"""


def normalize_text(text):  # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–º—É –≤–∏–¥—É
    normalized_text = {}
    normalized_text["date"] = text["date"].strip()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏
    total_raw = text["total"].strip().replace(' ', '').replace(',', '.')
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        total_num = int(float(total_raw))
        total_formatted = f"{total_num:,}".replace(',', ' ') + " "
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        total_formatted = text["total"].strip() + " "
    
    normalized_text["total"] = total_formatted
    normalized_text["sender"] = text["sender"].strip()
    normalized_text["pfone_number"] = text["pfone_number"].strip()
    normalized_text["recipient"] = text["recipient"].strip()
    normalized_text["bank"] = text["bank"].strip()
    normalized_text["operation_id"] = text["operation_id"].strip()[:-5]
    normalized_text["receipt_number"] = text["receipt_number"].strip()
    normalized_text["card_number"] = text["card_number"].strip()
    normalized_text["operation_id_1"] = text["operation_id"].strip()[-5:]

    return normalized_text


def generate_file(text: str) -> dict:  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    rows = text.strip().split("\n")

    if len(rows) != 9:
        return {"status": "error", "error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫"}

    new_text = {
        "date": rows[0],
        "total": rows[1],
        "sender": rows[2],
        "pfone_number": rows[3],
        "recipient": rows[4],
        "bank": rows[5],
        "operation_id": rows[6],
        "receipt_number": rows[7],
        "card_number": rows[8],
    }

    try:
        replace_text.replace_text("ishodnik.pdf", "nf.pdf", normalize_text(new_text))
    except BaseException as ex:
        return {"status": "error", "error": ex}

    return {"status": "success", "path": "nf.pdf"}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start."""

    await update.message.reply_text(start_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    user_text = update.message.text
    result = generate_file(user_text)

    if result["status"] == "success":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª
        await update.message.reply_document(
            document=open(result["path"], 'rb'),
            caption="–í–∞—à PDF-—Ñ–∞–π–ª –≥–æ—Ç–æ–≤!"
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {result['error']}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_TOKEN:
        print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        application.run_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            close_loop=False
        )
    except Exception as e:
        if "Conflict" in str(e):
            print("‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            print("   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return


if __name__ == "__main__":
    main()
